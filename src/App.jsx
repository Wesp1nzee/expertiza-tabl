import React, { useMemo, useState, useCallback, useRef } from 'react'

const INITIAL_ANALOG = {
	priceOfferThousand: '',
	areaSqm: '',
	// Корректировки (по умолчанию 1)
	adjRights: 1,
	adjFinance: 1,
	adjSaleDate: 1,
	adjTrade: 1,
	adjLocation: 1,
	adjArea: 1,
	adjWalls: 1,
	adjCommunications: 1,
	adjHouseCondition: 1,
	adjFloors: 1,
	adjFlatCondition: 1,
	adjBalcony: 1,
	units: '',
}

// Данные: средние скидки на торг (берем только "Среднее значение")
const TRADE_DISCOUNTS = {
    'Москва': {
        'Старый фонд': '9.4%',
        'Массовое жилье советской постройки': '8.4%',
        'Массовое современное жилье': '7.7%',
        'Жилье повышенной комфортности': '7.9%',
    },
    'Московская область': {
        'Старый фонд': '10.8%',
        'Массовое жилье советской постройки': '9.8%',
        'Массовое современное жилье': '7.3%',
        'Жилье повышенной комфортности': '-',
    },
    'Города с численностью населения более 1 млн чел. (кроме Москвы и Санкт-Петербурга)': {
        'Старый фонд': '9.5%',
        'Массовое жилье советской постройки': '8.3%',
        'Массовое современное жилье': '7.1%',
        'Жилье повышенной комфортности': '7.7%',
    },
    'Города с численностью населения 500-1000 тыс. чел.': {
        'Старый фонд': '9.9%',
        'Массовое жилье советской постройки': '8.5%',
        'Массовое современное жилье': '7.6%',
        'Жилье повышенной комфортности': '8.1%',
    },
    'Города с численностью населения до 500 тыс. чел.': {
        'Старый фонд': '9.8%',
        'Массовое жилье советской постройки': '8.8%',
        'Массовое современное жилье': '7.6%',
        'Жилье повышенной комфортности': '8.1%',
    },
    'Курортные регионы': {
        'Старый фонд': '11.5%',
        'Массовое жилье советской постройки': '-',
        'Массовое современное жилье': '-',
        'Жилье повышенной комфортности': '9.5%',
    },
}

function parsePercentToNumber(percentString) {
    if (!percentString || percentString === '-' ) return null
    const cleaned = String(percentString).replace('%', '').trim()
    const num = Number(cleaned)
    return Number.isFinite(num) ? num : null
}

function calcTradeMultiplier(avgPercentNumber) {
    if (avgPercentNumber === null) return null
    const fraction = avgPercentNumber / 100
    // Корректировка на торг: умножаем на (1 - скидка)
    const multiplier = 1 - fraction
    // округлим до 4 знаков для стабильности ввода
    return Math.round(multiplier * 10000) / 10000
}

// Корректировка на площадь квартиры: (S_OO / S_OA)^-0.06
function calcAreaMultiplier(evaluatedArea, analogArea) {
    const S_OO = Number(evaluatedArea)
    const S_OA = Number(analogArea)
    if (!Number.isFinite(S_OO) || !Number.isFinite(S_OA) || S_OO <= 0 || S_OA <= 0) return null
    const raw = Math.pow(S_OO / S_OA, -0.06)
    return Math.round(raw * 10000) / 10000
}

// Данные: корректирующие коэффициенты по местоположению
const LOCATION_COEFFICIENTS = {
	'Москва': {
		'Старый фонд, Массовое жилье советской постройки, Массовое современное жилье': {
			'Культурный и исторический центр': 1.0,
			'Центры деловой активности, зоны точечной застройки': 0.91,
			'Спальные микрорайоны современной высотной застройки, жилые кварталы': 0.85,
			'Спальные микрорайоны среднеэтажной застройки': 0.79,
			'Окраины городов, промзоны': 0.71,
		},
		'Жилые повышенной комфортности': {
			'Культурный и исторический центр': 1.0,
			'Центры деловой активности, зоны точечной застройки': 0.91,
			'Спальные микрорайоны современной высотной застройки, жилые кварталы': 0.86,
			'Спальные микрорайоны среднеэтажной застройки': 0.80,
			'Окраины городов, промзоны': 0.73,
		},
	},
	'Московская область': {
		'Старый фонд, Массовое жилье советской постройки, Массовое современное жилье': {
			'Культурный и исторический центр': 1.0,
			'Центры деловой активности, зоны точечной застройки': 0.94,
			'Спальные микрорайоны современной высотной застройки, жилые кварталы': 0.88,
			'Спальные микрорайоны среднеэтажной застройки': 0.84,
			'Окраины городов, промзоны': 0.73,
		},
		'Жилые повышенной комфортности': {
			'Культурный и исторический центр': 1.0,
			'Центры деловой активности, зоны точечной застройки': 0.95,
			'Спальные микрорайоны современной высотной застройки, жилые кварталы': 0.89,
			'Спальные микрорайоны среднеэтажной застройки': 0.85,
			'Окраины городов, промзоны': 0.77,
		},
	},
	'Города с численностью населения более 1 млн человек (кроме Москвы и Санкт-Петербурга)': {
		'Старый фонд, Массовое жилье советской постройки, Массовое современное жилье': {
			'Культурный и исторический центр': 1.0,
			'Центры деловой активности, зоны точечной застройки': 0.92,
			'Спальные микрорайоны современной высотной застройки, жилые кварталы': 0.85,
			'Спальные микрорайоны среднеэтажной застройки': 0.79,
			'Окраины городов, промзоны': 0.68,
		},
		'Жилые повышенной комфортности': {
			'Культурный и исторический центр': 1.0,
			'Центры деловой активности, зоны точечной застройки': 0.93,
			'Спальные микрорайоны современной высотной застройки, жилые кварталы': 0.88,
			'Спальные микрорайоны среднеэтажной застройки': 0.82,
			'Окраины городов, промзоны': 0.74,
		},
	},
	'Города с численностью населения 500-1000 тыс. человек': {
		'Старый фонд, Массовое жилье советской постройки, Массовое современное жилье': {
			'Культурный и исторический центр': 1.0,
			'Центры деловой активности, зоны точечной застройки': 0.91,
			'Спальные микрорайоны современной высотной застройки, жилые кварталы': 0.86,
			'Спальные микрорайоны среднеэтажной застройки': 0.80,
			'Окраины городов, промзоны': 0.70,
		},
		'Жилые повышенной комфортности': {
			'Культурный и исторический центр': 1.0,
			'Центры деловой активности, зоны точечной застройки': 0.92,
			'Спальные микрорайоны современной высотной застройки, жилые кварталы': 0.87,
			'Спальные микрорайоны среднеэтажной застройки': 0.82,
			'Окраины городов, промзоны': 0.75,
		},
	},
	'Города с численностью населения менее 500 тыс. человек': {
		'Старый фонд, Массовое жилье советской постройки, Массовое современное жилье': {
			'Культурный и исторический центр': 1.0,
			'Центры деловой активности, зоны точечной застройки': 0.92,
			'Спальные микрорайоны современной высотной застройки, жилые кварталы': 0.86,
			'Спальные микрорайоны среднеэтажной застройки': 0.81,
			'Окраины городов, промзоны': 0.70,
		},
		'Жилые повышенной комфортности': {
			'Культурный и исторический центр': 1.0,
			'Центры деловой активности, зоны точечной застройки': 0.93,
			'Спальные микрорайоны современной высотной застройки, жилые кварталы': 0.87,
			'Спальные микрорайоны среднеэтажной застройки': 0.81,
			'Окраины городов, промзоны': 0.74,
		},
	},
	'Курортные регионы': {
		'Старый фонд, Массовое жилье советской постройки, Массовое современное жилье': {
			'Культурный и исторический центр': 1.0,
			'Центры деловой активности, зоны точечной застройки': 0.89,
			'Спальные микрорайоны современной высотной застройки, жилые кварталы': 0.82,
			'Спальные микрорайоны среднеэтажной застройки': 0.79,
			'Окраины городов, промзоны': 0.67,
		},
		'Жилые повышенной комфортности': {
			'Культурный и исторический центр': 1.0,
			'Центры деловой активности, зоны точечной застройки': 0.89,
			'Спальные микрорайоны современной высотной застройки, жилые кварталы': 0.83,
			'Спальные микрорайоны среднеэтажной застройки': 0.79,
			'Окраины городов, промзоны': 0.72,
		},
	},
}

// Сопоставление названий регионов между наборами данных
const REGION_ALIASES_FOR_LOCATION = {
	'Города с численностью населения более 1 млн чел. (кроме Москвы и Санкт-Петербурга)': 'Города с численностью населения более 1 млн человек (кроме Москвы и Санкт-Петербурга)',
	'Города с численностью населения 500-1000 тыс. чел.': 'Города с численностью населения 500-1000 тыс. человек',
	'Города с численностью населения до 500 тыс. чел.': 'Города с численностью населения менее 500 тыс. человек',
}

function resolveLocationRegionKey(selectedRegion) {
	if (LOCATION_COEFFICIENTS[selectedRegion]) return selectedRegion
	const alias = REGION_ALIASES_FOR_LOCATION[selectedRegion]
	return alias && LOCATION_COEFFICIENTS[alias] ? alias : null
}

function resolveLocationFundGroupKey(selectedFund) {
	// Если повышенной комфортности, используем соответствующую группу, иначе — объединенную
	if (selectedFund === 'Жилье повышенной комфортности') return 'Жилые повышенной комфортности'
	return 'Старый фонд, Массовое жилье советской постройки, Массовое современное жилье'
}

// Данные: коэффициенты по материалу стен
const WALL_MATERIAL_COEFFICIENTS = {
	'Москва': {
		'Старый фонд': {
			'объект_оценки': {
				'кирпичные стены': {
					'аналог_кирпичные стены': 1.0,
					'аналог_шлакоблочные стены': 1.14,
					'аналог_деревянные стены': 1.30,
				},
				'шлакоблочные стены': {
					'аналог_кирпичные стены': 0.88,
					'аналог_шлакоблочные стены': 1.0,
					'аналог_деревянные стены': 1.14,
				},
				'деревянные стены': {
					'аналог_кирпичные стены': 0.77,
					'аналог_шлакоблочные стены': 0.88,
					'аналог_деревянные стены': 1.0,
				},
			},
		},
		'Массовое жилье советской постройки, Массовое современное жилье, Жилье повышенной комфортности': {
			'объект_оценки': {
				'кирпичные стены': {
					'аналог_кирпичные стены': 1.0,
					'аналог_монолитные стены': 1.0,
					'аналог_панельные стены': 1.08,
				},
				'монолитные стены': {
					'аналог_кирпичные стены': 0.94,
					'аналог_монолитные стены': 1.0,
					'аналог_панельные стены': 1.01,
				},
				'панельные стены': {
					'аналог_кирпичные стены': 0.93,
					'аналог_монолитные стены': 0.99,
					'аналог_панельные стены': 1.0,
				},
			},
		},
	},
	'Московская область': {
		'Старый фонд': {
			'объект_оценки': {
				'кирпичные стены': {
					'аналог_кирпичные стены': 1.0,
					'аналог_шлакоблочные стены': 1.17,
					'аналог_деревянные стены': 1.33,
				},
				'шлакоблочные стены': {
					'аналог_кирпичные стены': 0.85,
					'аналог_шлакоблочные стены': 1.0,
					'аналог_деревянные стены': 1.14,
				},
				'деревянные стены': {
					'аналог_кирпичные стены': 0.75,
					'аналог_шлакоблочные стены': 0.88,
					'аналог_деревянные стены': 1.0,
				},
			},
		},
		'Массовое жилье советской постройки, Массовое современное жилье, Жилье повышенной комфортности': {
			'объект_оценки': {
				'кирпичные стены': {
					'аналог_кирпичные стены': 1.0,
					'аналог_монолитные стены': 1.05,
					'аналог_панельные стены': 1.09,
				},
				'монолитные стены': {
					'аналог_кирпичные стены': 0.95,
					'аналог_монолитные стены': 1.0,
					'аналог_панельные стены': 1.04,
				},
				'панельные стены': {
					'аналог_кирпичные стены': 0.92,
					'аналог_монолитные стены': 0.96,
					'аналог_панельные стены': 1.0,
				},
			},
		},
	},
	'Города с численностью населения более 1 млн человек (кроме Москвы и Санкт-Петербурга)': {
		'Старый фонд': {
			'объект_оценки': {
				'кирпичные стены': {
					'аналог_кирпичные стены': 1.0,
					'аналог_шлакоблочные стены': 1.17,
					'аналог_деревянные стены': 1.35,
				},
				'шлакоблочные стены': {
					'аналог_кирпичные стены': 0.85,
					'аналог_шлакоблочные стены': 1.0,
					'аналог_деревянные стены': 1.16,
				},
				'деревянные стены': {
					'аналог_кирпичные стены': 0.74,
					'аналог_шлакоблочные стены': 0.86,
					'аналог_деревянные стены': 1.0,
				},
			},
		},
	},
	'Города с численностью населения 500-1000 тыс. человек': {
		'Старый фонд': {
			'объект_оценки': {
				'кирпичные стены': {
					'аналог_кирпичные стены': 1.0,
					'аналог_шлакоблочные стены': 1.18,
					'аналог_деревянные стены': 1.39,
				},
				'шлакоблочные стены': {
					'аналог_кирпичные стены': 0.85,
					'аналог_шлакоблочные стены': 1.0,
					'аналог_деревянные стены': 1.17,
				},
				'деревянные стены': {
					'аналог_кирпичные стены': 0.72,
					'аналог_шлакоблочные стены': 0.85,
					'аналог_деревянные стены': 1.0,
				},
			},
		},
		'Массовое жилье советской постройки, Массовое современное жилье, Жилье повышенной комфортности': {
			'объект_оценки': {
				'кирпичные стены': {
					'аналог_кирпичные стены': 1.0,
					'аналог_монолитные стены': 1.05,
					'аналог_панельные стены': 1.07,
				},
				'монолитные стены': {
					'аналог_кирпичные стены': 0.96,
					'аналог_монолитные стены': 1.0,
					'аналог_панельные стены': 1.02,
				},
				'панельные стены': {
					'аналог_кирпичные стены': 0.93,
					'аналог_монолитные стены': 0.98,
					'аналог_панельные стены': 1.0,
				},
			},
		},
	},
	'Города с численностью населения до 500 тыс. человек': {
		'Старый фонд': {
			'объект_оценки': {
				'кирпичные стены': {
					'аналог_кирпичные стены': 1.0,
					'аналог_шлакоблочные стены': 1.18,
					'аналог_деревянные стены': 1.41,
				},
				'шлакоблочные стены': {
					'аналог_кирпичные стены': 0.85,
					'аналог_шлакоблочные стены': 1.0,
					'аналог_деревянные стены': 1.19,
				},
				'деревянные стены': {
					'аналог_кирпичные стены': 0.71,
					'аналог_шлакоблочные стены': 0.84,
					'аналог_деревянные стены': 1.0,
				},
			},
		},
		'Массовое жилье советской постройки, Массовое современное жилье, Жилье повышенной комфортности': {
			'объект_оценки': {
				'кирпичные стены': {
					'аналог_кирпичные стены': 1.0,
					'аналог_монолитные стены': 1.06,
					'аналог_панельные стены': 1.08,
				},
				'монолитные стены': {
					'аналог_кирпичные стены': 0.95,
					'аналог_монолитные стены': 1.0,
					'аналог_панельные стены': 1.02,
				},
				'панельные стены': {
					'аналог_кирпичные стены': 0.92,
					'аналог_монолитные стены': 0.98,
					'аналог_панельные стены': 1.0,
				},
			},
		},
	},
	'Курортные регионы': {
		'Старый фонд': {
			'объект_оценки': {
				'кирпичные стены': {
					'аналог_кирпичные стены': 1.0,
					'аналог_шпакоблочные стены': 1.21,
					'аналог_деревянные стены': 1.32,
				},
				'шпакоблочные стены': {
					'аналог_кирпичные стены': 0.82,
					'аналог_шпакоблочные стены': 1.0,
					'аналог_деревянные стены': 1.08,
				},
				'деревянные стены': {
					'аналог_кирпичные стены': 0.76,
					'аналог_шпакоблочные стены': 0.92,
					'аналог_деревянные стены': 1.0,
				},
			},
		},
		'Массовое жилье советской постройки, Массовое современное жилье, Жилье повышенной комфортности': {
			'объект_оценки': {
				'кирпичные стены': {
					'аналог_кирпичные стены': 1.0,
					'аналог_монолитные стены': 1.05,
					'аналог_панельные стены': 1.06,
				},
				'монолитные стены': {
					'аналог_кирпичные стены': 0.95,
					'аналог_монолитные стены': 1.0,
					'аналог_панельные стены': 1.0,
				},
				'панельные стены': {
					'аналог_кирпичные стены': 0.90,
					'аналог_монолитные стены': 0.94,
					'аналог_панельные стены': 1.0,
				},
			},
		},
	},
	'Усредненные по городам России': {
		'Старый фонд': {
			'объект_оценки': {
				'кирпичные стены': {
					'аналог_кирпичные стены': 1.0,
					'аналог_шлакоблочные стены': 1.17,
					'аналог_деревянные стены': 1.35,
				},
				'шлакоблочные стены': {
					'аналог_кирпичные стены': 0.86,
					'аналог_шлакоблочные стены': 1.0,
					'аналог_деревянные стены': 1.16,
				},
				'деревянные стены': {
					'аналог_кирпичные стены': 0.74,
					'аналог_шлакоблочные стены': 0.86,
					'аналог_деревянные стены': 1.0,
				},
			},
		},
		'Массовое жилье советской постройки, Массовое современное жилье, Жилье повышенной комфортности': {
			'объект_оценки': {
				'кирпичные стены': {
					'аналог_кирпичные стены': 1.0,
					'аналог_монолитные стены': 1.06,
					'аналог_панельные стены': 1.08,
				},
				'монолитные стены': {
					'аналог_кирпичные стены': 0.95,
					'аналог_монолитные стены': 1.0,
					'аналог_панельные стены': 1.02,
				},
				'панельные стены': {
					'аналог_кирпичные стены': 0.92,
					'аналог_монолитные стены': 0.98,
					'аналог_панельные стены': 1.0,
				},
			},
		},
	},
}

const REGION_ALIASES_FOR_WALLS = {
	'Города с численностью населения более 1 млн чел. (кроме Москвы и Санкт-Петербурга)': 'Города с численностью населения более 1 млн человек (кроме Москвы и Санкт-Петербурга)',
	'Города с численностью населения 500-1000 тыс. чел.': 'Города с численностью населения 500-1000 тыс. человек',
	'Города с численностью населения до 500 тыс. чел.': 'Города с численностью населения до 500 тыс. человек',
}

function resolveWallsRegionKey(selectedRegion) {
	if (WALL_MATERIAL_COEFFICIENTS[selectedRegion]) return selectedRegion
	const alias = REGION_ALIASES_FOR_WALLS[selectedRegion]
	return alias && WALL_MATERIAL_COEFFICIENTS[alias] ? alias : null
}

function resolveWallsFundGroupKey(selectedFund) {
	if (selectedFund === 'Старый фонд') return 'Старый фонд'
	return 'Массовое жилье советской постройки, Массовое современное жилье, Жилье повышенной комфортности'
}

function getEvalWallOptions(regionKey, fundKey) {
	const group = WALL_MATERIAL_COEFFICIENTS[regionKey]?.[fundKey]?.['объект_оценки']
	return group ? Object.keys(group) : []
}

function getAnalogWallOptions(regionKey, fundKey, evalWall) {
	const mapping = WALL_MATERIAL_COEFFICIENTS[regionKey]?.[fundKey]?.['объект_оценки']?.[evalWall]
	if (!mapping) return []
	return Object.keys(mapping).map((k) => k.replace(/^аналог_/, ''))
}

function calcWallsMultiplier(regionKey, fundKey, evalWall, analogWall) {
	const analogKey = `аналог_${analogWall}`
	const value = WALL_MATERIAL_COEFFICIENTS[regionKey]?.[fundKey]?.['объект_оценки']?.[evalWall]?.[analogKey]
	return Number.isFinite(value) ? Math.round(value * 10000) / 10000 : null
}

// Данные: коэффициенты по физическому состоянию дома
const HOUSE_CONDITION_COEFFICIENTS = {
	'Москва': {
		'Старый фонд, Массовое жилье советской постройки, Массовое современное жилье': {
			'объект_оценки': {
				'хорошее': {
					'аналог_хорошее': 1.0,
					'аналог_удовл': 1.17,
					'аналог_неудовл': 1.31,
				},
				'удовл': {
					'аналог_хорошее': 0.85,
					'аналог_удовл': 1.0,
					'аналог_неудовл': 1.12,
				},
				'неудовл': {
					'аналог_хорошее': 0.77,
					'аналог_удовл': 0.90,
					'аналог_неудовл': 1.0,
				},
			},
		},
	},
	'Московская область': {
		'Старый фонд, Массовое жилье советской постройки, Массовое современное жилье': {
			'объект_оценки': {
				'хорошее': {
					'аналог_хорошее': 1.0,
					'аналог_удовл': 1.19,
					'аналог_неудовл': 1.40,
				},
				'удовл': {
					'аналог_хорошее': 0.84,
					'аналог_удовл': 1.0,
					'аналог_неудовл': 1.18,
				},
				'неудовл': {
					'аналог_хорошее': 0.71,
					'аналог_удовл': 0.85,
					'аналог_неудовл': 1.0,
				},
			},
		},
	},
	'Города с численностью населения более 1 млн человек (кроме Москвы и Санкт-Петербурга)': {
		'Старый фонд, Массовое жилье советской постройки, Массовое современное жилье': {
			'объект_оценки': {
				'хорошее': {
					'аналог_хорошее': 1.0,
					'аналог_удовл': 1.17,
					'аналог_неудовл': 1.38,
				},
				'удовл': {
					'аналог_хорошее': 0.85,
					'аналог_удовл': 1.0,
					'аналог_неудовл': 1.17,
				},
				'неудовл': {
					'аналог_хорошее': 0.73,
					'аналог_удовл': 0.85,
					'аналог_неудовл': 1.0,
				},
			},
		},
	},
	'Города с численностью населения 500-1000 тыс. человек': {
		'Старый фонд, Массовое жилье советской постройки, Массовое современное жилье': {
			'объект_оценки': {
				'хорошее': {
					'аналог_хорошее': 1.0,
					'аналог_удовл': 1.20,
					'аналог_неудовл': 1.39,
				},
				'удовл': {
					'аналог_хорошее': 0.83,
					'аналог_удовл': 1.0,
					'аналог_неудовл': 1.16,
				},
				'неудовл': {
					'аналог_хорошее': 0.72,
					'аналог_удовл': 0.86,
					'аналог_неудовл': 1.0,
				},
			},
		},
	},
	'Города с численностью населения до 500 тыс. человек': {
		'Старый фонд, Массовое жилье советской постройки, Массовое современное жилье': {
			'объект_оценки': {
				'хорошее': {
					'аналог_хорошее': 1.0,
					'аналог_удовл': 1.19,
					'аналог_неудовл': 1.38,
				},
				'удовл': {
					'аналог_хорошее': 0.84,
					'аналог_удовл': 1.0,
					'аналог_неудовл': 1.16,
				},
				'неудовл': {
					'аналог_хорошее': 0.73,
					'аналог_удовл': 0.86,
					'аналог_неудовл': 1.0,
				},
			},
		},
	},
	'Курортные регионы': {
		'Старый фонд, Массовое жилье советской постройки, Массовое современное жилье': {
			'объект_оценки': {
				'хорошее': {
					'аналог_хорошее': 1.0,
					'аналог_удовл': 1.23,
					'аналог_неудовл': 1.47,
				},
				'удовл': {
					'аналог_хорошее': 0.82,
					'аналог_удовл': 1.0,
					'аналог_неудовл': 1.20,
				},
				'неудовл': {
					'аналог_хорошее': 0.68,
					'аналог_удовл': 0.84,
					'аналог_неудовл': 1.0,
				},
			},
		},
	},
}

const REGION_ALIASES_FOR_HOUSE_CONDITION = {
	'Города с численностью населения более 1 млн чел. (кроме Москвы и Санкт-Петербурга)': 'Города с численностью населения более 1 млн человек (кроме Москвы и Санкт-Петербурга)',
	'Города с численностью населения 500-1000 тыс. чел.': 'Города с численностью населения 500-1000 тыс. человек',
	'Города с численностью населения до 500 тыс. чел.': 'Города с численностью населения до 500 тыс. человек',
}

function resolveHouseConditionRegionKey(selectedRegion) {
	if (HOUSE_CONDITION_COEFFICIENTS[selectedRegion]) return selectedRegion
	const alias = REGION_ALIASES_FOR_HOUSE_CONDITION[selectedRegion]
	return alias && HOUSE_CONDITION_COEFFICIENTS[alias] ? alias : null
}

function resolveHouseConditionFundGroupKey(selectedFund) {
	return 'Старый фонд, Массовое жилье советской постройки, Массовое современное жилье'
}

function getEvalHouseConditionOptions(regionKey, fundKey) {
	const group = HOUSE_CONDITION_COEFFICIENTS[regionKey]?.[fundKey]?.['объект_оценки']
	return group ? Object.keys(group) : []
}

function getAnalogHouseConditionOptions(regionKey, fundKey, evalCondition) {
	const mapping = HOUSE_CONDITION_COEFFICIENTS[regionKey]?.[fundKey]?.['объект_оценки']?.[evalCondition]
	if (!mapping) return []
	return Object.keys(mapping).map((k) => k.replace(/^аналог_/, ''))
}

function calcHouseConditionMultiplier(regionKey, fundKey, evalCondition, analogCondition) {
	const analogKey = `аналог_${analogCondition}`
	const value = HOUSE_CONDITION_COEFFICIENTS[regionKey]?.[fundKey]?.['объект_оценки']?.[evalCondition]?.[analogKey]
	return Number.isFinite(value) ? Math.round(value * 10000) / 10000 : null
}

// Данные: коэффициенты по состоянию отделки квартиры
const FLAT_CONDITION_COEFFICIENTS = {
	'Москва': {
		'объект_оценки': {
			'комфортный ремонт (отделка «премиум»)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 1.0,
				'аналог_типовой ремонт (отделка «стандарт»)': 1.14,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 1.24,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': 1.35,
			},
			'типовой ремонт (отделка «стандарт»)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 0.88,
				'аналог_типовой ремонт (отделка «стандарт»)': 1.0,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 1.09,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': 1.19,
			},
			'требует косметического ремонта (в т.ч. под чистовую отделку)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 0.81,
				'аналог_типовой ремонт (отделка «стандарт»)': 0.82,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 1.0,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': 1.09,
			},
			'требует капитального ремонта (в т.ч. без отделки)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 0.84,
				'аналог_типовой ремонт (отделка «стандарт»)': 0.92,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 1.0,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': 1.0,
			},
		},
	},
	'Московская область': {
		'объект_оценки': {
			'комфортный ремонт (отделка «премиум»)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 1.0,
				'аналог_типовой ремонт (отделка «стандарт»)': 1.17,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 1.23,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': 1.33,
			},
			'типовой ремонт (отделка «стандарт»)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 0.85,
				'аналог_типовой ремонт (отделка «стандарт»)': 1.0,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 1.13,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': 1.13,
			},
			'требует косметического ремонта (в т.ч. под чистовую отделку)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 0.81,
				'аналог_типовой ремонт (отделка «стандарт»)': 0.95,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 1.0,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': 1.08,
			},
			'требует капитального ремонта (в т.ч. без отделки)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 0.75,
				'аналог_типовой ремонт (отделка «стандарт»)': 0.88,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 0.92,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': 1.0,
			},
		},
	},
	'Города с численностью населения более 1 млн человек (кроме Москвы и Санкт-Петербурга)': {
		'объект_оценки': {
			'комфортный ремонт (отделка «премиум»)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 1.0,
				'аналог_типовой ремонт (отделка «стандарт»)': 1.13,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 1.22,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': 1.34,
			},
			'типовой ремонт (отделка «стандарт»)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 0.89,
				'аналог_типовой ремонт (отделка «стандарт»)': 1.0,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 1.08,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': 1.19,
			},
			'требует косметического ремонта (в т.ч. под чистовую отделку)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 0.82,
				'аналог_типовой ремонт (отделка «стандарт»)': 0.92,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 1.0,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': 1.10,
			},
			'требует капитального ремонта (в т.ч. без отделки)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 0.74,
				'аналог_типовой ремонт (отделка «стандарт»)': 0.84,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 0.91,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': 1.0,
			},
		},
	},
	'Города с численностью населения 500-1000 тыс. человек': {
		'объект_оценки': {
			'комфортный ремонт (отделка «премиум»)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 1.0,
				'аналог_типовой ремонт (отделка «стандарт»)': 1.13,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 1.22,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': 1.33,
			},
			'типовой ремонт (отделка «стандарт»)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 0.89,
				'аналог_типовой ремонт (отделка «стандарт»)': 1.0,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 1.18,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': 1.18,
			},
			'требует косметического ремонта (в т.ч. под чистовую отделку)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 0.82,
				'аналог_типовой ремонт (отделка «стандарт»)': 0.92,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 1.0,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': 1.09,
			},
			'требует капитального ремонта (в т.ч. без отделки)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 0.75,
				'аналог_типовой ремонт (отделка «стандарт»)': 0.85,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 0.92,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': 1.0,
			},
		},
	},
	'Города с численностью населения до 500 тыс. человек': {
		'объект_оценки': {
			'комфортный ремонт (отделка «премиум»)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 1.0,
				'аналог_типовой ремонт (отделка «стандарт»)': 1.14,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 1.20,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': 1.38,
			},
			'типовой ремонт (отделка «стандарт»)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 0.88,
				'аналог_типовой ремонт (отделка «стандарт»)': 1.0,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 0.06,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': 1.21,
			},
			'требует косметического ремонта (в т.ч. под чистовую отделку)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 0.83,
				'аналог_типовой ремонт (отделка «стандарт»)': 0.95,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 1.0,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': 1.15,
			},
			'требует капитального ремонта (в т.ч. без отделки)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 0.72,
				'аналог_типовой ремонт (отделка «стандарт»)': 0.82,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 0.87,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': 1.0,
			},
		},
	},
	'Курортные регионы': {
		'объект_оценки': {
			'комфортный ремонт (отделка «премиум»)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 1.0,
				'аналог_типовой ремонт (отделка «стандарт»)': 1.15,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 1.26,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': 1.41,
			},
			'типовой ремонт (отделка «стандарт»)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 0.87,
				'аналог_типовой ремонт (отделка «стандарт»)': 1.0,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 1.23,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': null,
			},
			'требует косметического ремонта (в т.ч. под чистовую отделку)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 0.79,
				'аналог_типовой ремонт (отделка «стандарт»)': 0.91,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 1.0,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': null,
			},
			'требует капитального ремонта (в т.ч. без отделки)': {
				'аналог_комфортный ремонт (отделка «премиум»)': 0.71,
				'аналог_типовой ремонт (отделка «стандарт»)': 0.81,
				'аналог_требует косметического ремонта (в т.ч. под чистовую отделку)': 1.0,
				'аналог_требует капитального ремонта (в т.ч. без отделки)': null,
			},
		},
	},
}

const REGION_ALIASES_FOR_FLAT_CONDITION = {
	'Города с численностью населения более 1 млн чел. (кроме Москвы и Санкт-Петербурга)': 'Города с численностью населения более 1 млн человек (кроме Москвы и Санкт-Петербурга)',
	'Города с численностью населения 500-1000 тыс. чел.': 'Города с численностью населения 500-1000 тыс. человек',
	'Города с численностью населения до 500 тыс. чел.': 'Города с численностью населения до 500 тыс. человек',
}

function resolveFlatConditionRegionKey(selectedRegion) {
	if (FLAT_CONDITION_COEFFICIENTS[selectedRegion]) return selectedRegion
	const alias = REGION_ALIASES_FOR_FLAT_CONDITION[selectedRegion]
	return alias && FLAT_CONDITION_COEFFICIENTS[alias] ? alias : null
}

function getEvalFlatConditionOptions(regionKey) {
	const group = FLAT_CONDITION_COEFFICIENTS[regionKey]?.['объект_оценки']
	return group ? Object.keys(group) : []
}

function getAnalogFlatConditionOptions(regionKey, evalCondition) {
	const mapping = FLAT_CONDITION_COEFFICIENTS[regionKey]?.['объект_оценки']?.[evalCondition]
	if (!mapping) return []
	return Object.keys(mapping).map((k) => k.replace(/^аналог_/, ''))
}

function calcFlatConditionMultiplier(regionKey, evalCondition, analogCondition) {
	const analogKey = `аналог_${analogCondition}`
	const value = FLAT_CONDITION_COEFFICIENTS[regionKey]?.['объект_оценки']?.[evalCondition]?.[analogKey]
	return Number.isFinite(value) ? Math.round(value * 10000) / 10000 : null
}

// Коэффициенты: наличие балкона/лоджии
const BALCONY_COEFFICIENTS = {
	'москва': {
		'объект_есть_аналог_есть': 1.0,
		'объект_есть_аналог_нет': 1.09,
		'объект_нет_аналог_есть': 0.92,
		'объект_нет_аналог_нет': 1.0,
	},
	'московская_область': {
		'объект_есть_аналог_есть': 1.0,
		'объект_есть_аналог_нет': 1.08,
		'объект_нет_аналог_есть': 0.93,
		'объект_нет_аналог_нет': 1.0,
	},
	'города_более_1_млн': {
		'объект_есть_аналог_есть': 1.0,
		'объект_есть_аналог_нет': 1.08,
		'объект_нет_аналог_есть': 0.93,
		'объект_нет_аналог_нет': 1.0,
	},
	'города_500_1000_тыс': {
		'объект_есть_аналог_есть': 1.0,
		'объект_есть_аналог_нет': 1.08,
		'объект_нет_аналог_есть': 0.92,
		'объект_нет_аналог_нет': 1.0,
	},
	'города_до_500_тыс': {
		'объект_есть_аналог_есть': 1.0,
		'объект_есть_аналог_нет': 1.08,
		'объект_нет_аналог_есть': 0.93,
		'объект_нет_аналог_нет': 0.0,
	},
	'курортные_регионы': {
		'объект_есть_аналог_есть': 1.0,
		'объект_есть_аналог_нет': 1.10,
		'объект_нет_аналог_есть': 0.91,
		'объект_нет_аналог_нет': 1.0,
	},
}

const REGION_ALIASES_FOR_BALCONY = {
	'Москва': 'москва',
	'Московская область': 'московская_область',
	'Города с численностью населения более 1 млн чел. (кроме Москвы и Санкт-Петербурга)': 'города_более_1_млн',
	'Города с численностью населения более 1 млн человек (кроме Москвы и Санкт-Петербурга)': 'города_более_1_млн',
	'Города с численностью населения 500-1000 тыс. чел.': 'города_500_1000_тыс',
	'Города с численностью населения 500-1000 тыс. человек': 'города_500_1000_тыс',
	'Города с численностью населения до 500 тыс. чел.': 'города_до_500_тыс',
	'Города с численностью населения менее 500 тыс. человек': 'города_до_500_тыс',
	'Курортные регионы': 'курортные_регионы',
}

function resolveBalconyRegionKey(selectedRegion) {
	const key = REGION_ALIASES_FOR_BALCONY[selectedRegion]
	return key && BALCONY_COEFFICIENTS[key] ? key : null
}

function calcBalconyMultiplier(balconyRegionKey, evalHasBalcony, analogHasBalcony) {
	if (!balconyRegionKey) return null
	const k = `${evalHasBalcony ? 'объект_есть' : 'объект_нет'}_${analogHasBalcony ? 'аналог_есть' : 'аналог_нет'}`
	const value = BALCONY_COEFFICIENTS[balconyRegionKey]?.[k]
	return Number.isFinite(value) ? Math.round(value * 10000) / 10000 : null
}

// Стили для улучшенного UI
const styles = {
	container: {
		padding: '24px',
		fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif',
		backgroundColor: '#f8fafc',
		minHeight: '100vh',
		color: '#1e293b',
	},
	header: {
		textAlign: 'center',
		marginBottom: '32px',
		color: '#1e293b',
		fontSize: '28px',
		fontWeight: '700',
		letterSpacing: '-0.025em',
	},
	tableContainer: {
		backgroundColor: 'white',
		borderRadius: '12px',
		boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
		overflow: 'hidden',
		marginBottom: '24px',
	},
	table: {
		width: '100%',
		borderCollapse: 'collapse',
		fontSize: '14px',
	},
	thead: {
		backgroundColor: '#f1f5f9',
	},
	th: {
		padding: '16px 12px',
		textAlign: 'left',
		fontWeight: '600',
		color: '#475569',
		borderBottom: '2px solid #e2e8f0',
		fontSize: '13px',
		textTransform: 'uppercase',
		letterSpacing: '0.05em',
	},
	td: {
		padding: '12px',
		borderBottom: '1px solid #f1f5f9',
		verticalAlign: 'middle',
	},
	tdLabel: {
		fontWeight: '500',
		color: '#374151',
		backgroundColor: '#fafafa',
	},
	input: {
		width: '100%',
		padding: '8px 12px',
		border: '2px solid #e2e8f0',
		borderRadius: '6px',
		fontSize: '14px',
		fontFamily: 'inherit',
		transition: 'all 0.2s ease',
		backgroundColor: 'white',
	},
		select: {
			width: '100%',
			padding: '8px 12px',
			border: '2px solid #e2e8f0',
			borderRadius: '6px',
			fontSize: '14px',
			fontFamily: 'inherit',
			transition: 'all 0.2s ease',
			backgroundColor: 'white',
		},
	inputFocus: {
		borderColor: '#3b82f6',
		boxShadow: '0 0 0 3px rgba(59, 130, 246, 0.1)',
		outline: 'none',
	},
	inputError: {
		borderColor: '#ef4444',
		backgroundColor: '#fef2f2',
	},
	valueDisplay: {
		color: '#059669',
		fontWeight: '600',
		fontSize: '13px',
		backgroundColor: '#f0fdf4',
		padding: '4px 8px',
		borderRadius: '4px',
		border: '1px solid #bbf7d0',
	},
	inputGroup: {
		display: 'flex',
		gap: '8px',
		alignItems: 'center',
	},
	highlightRow: {
		backgroundColor: '#fef3c7',
		borderLeft: '4px solid #f59e0b',
	},
	resultRow: {
		backgroundColor: '#dbeafe',
		borderLeft: '4px solid #3b82f6',
		fontWeight: '600',
	},
	finalRow: {
		backgroundColor: '#dcfce7',
		borderLeft: '4px solid #22c55e',
		fontWeight: '700',
		fontSize: '16px',
	},
	note: {
		marginTop: '16px',
		padding: '12px 16px',
		backgroundColor: '#f1f5f9',
		borderRadius: '8px',
		color: '#64748b',
		fontSize: '13px',
		fontStyle: 'italic',
		borderLeft: '4px solid #94a3b8',
	},
	analogHeader: {
		backgroundColor: '#3b82f6',
		color: 'white',
		fontWeight: '600',
		textAlign: 'center',
	},
	sectionDivider: {
		height: '2px',
		backgroundColor: '#e2e8f0',
		margin: '8px 0',
	},
	// Мобильные стили
	mobileContainer: {
		padding: '16px',
	},
	mobileTable: {
		fontSize: '12px',
	},
	mobileTh: {
		padding: '12px 8px',
		fontSize: '11px',
	},
	mobileTd: {
		padding: '8px',
	},
	mobileInput: {
		fontSize: '12px',
		padding: '6px 8px',
	},
	mobileValueDisplay: {
		fontSize: '11px',
		padding: '2px 6px',
	},
	mobileHeader: {
		fontSize: '24px',
		marginBottom: '24px',
	},
}

function parseNumber(value) {
	if (value === '' || value === null || value === undefined) return 0
	const n = Number(value)
	return Number.isFinite(n) ? n : 0
}

function formatNumber(n, digits = 2) {
	if (!Number.isFinite(n)) return ''
	return n.toFixed(digits)
}

// Вынесем Input в отдельный компонент с useMemo для предотвращения пересоздания
const Input = React.memo(({ value, onChange, step = '0.01', min, placeholder, isError = false, isMobile = false }) => {
	const inputStyle = {
		...styles.input,
		...(isMobile ? styles.mobileInput : {}),
		...(isError ? styles.inputError : {}),
	}

	return (
		<input
			type="number"
			value={value}
			step={step}
			min={min}
			placeholder={placeholder}
			onChange={(e) => onChange(e.target.value)}
			style={inputStyle}
		/>
	)
})

export default function App() {
	const [analogs, setAnalogs] = useState([INITIAL_ANALOG, INITIAL_ANALOG, INITIAL_ANALOG])
	const [isMobile, setIsMobile] = useState(false)
	const [selectedRegion, setSelectedRegion] = useState('Москва')
	const [selectedFund, setSelectedFund] = useState('Старый фонд')
	const [selectedLocationClass, setSelectedLocationClass] = useState('Культурный и исторический центр')
	const [selectedEvalWall, setSelectedEvalWall] = useState('кирпичные стены')
	const [selectedEvalHouseCondition, setSelectedEvalHouseCondition] = useState('хорошее')
	const [selectedEvalFlatCondition, setSelectedEvalFlatCondition] = useState('типовой ремонт (отделка «стандарт»)')
	const [selectedEvalBalcony, setSelectedEvalBalcony] = useState('есть')
	const evaluatedAreaSqm = 46.7

	// Определение мобильного устройства
	React.useEffect(() => {
		const checkMobile = () => {
			setIsMobile(window.innerWidth <= 768)
		}
		checkMobile()
		window.addEventListener('resize', checkMobile)
		return () => window.removeEventListener('resize', checkMobile)
	}, [])

	// Вычисляем выбранную скидку на торг и мультипликатор
	const tradeAvgPercent = useMemo(() => {
		const regionData = TRADE_DISCOUNTS[selectedRegion]
		if (!regionData) return null
		return parsePercentToNumber(regionData[selectedFund])
	}, [selectedRegion, selectedFund])

	const tradeMultiplier = useMemo(() => calcTradeMultiplier(tradeAvgPercent), [tradeAvgPercent])

	// Применяем корректировку на торг автоматически при изменении выбора
	React.useEffect(() => {
		if (tradeMultiplier === null) return
		setAnalogs((prev) => prev.map((a) => ({ ...a, adjTrade: tradeMultiplier })))
	}, [tradeMultiplier])

	// Вычисляем коэффициент по местоположению
	const locationMultiplier = useMemo(() => {
		const regionKey = resolveLocationRegionKey(selectedRegion)
		if (!regionKey) return null
		const fundKey = resolveLocationFundGroupKey(selectedFund)
		const group = LOCATION_COEFFICIENTS[regionKey]?.[fundKey]
		if (!group) return null
		const value = group[selectedLocationClass]
		return Number.isFinite(value) ? value : null
	}, [selectedRegion, selectedFund, selectedLocationClass])

	// Применяем корректировку на местоположение автоматически
	React.useEffect(() => {
		if (locationMultiplier === null) return
		setAnalogs((prev) => prev.map((a) => ({ ...a, adjLocation: locationMultiplier })))
	}, [locationMultiplier])

	// Автокорректировка материала стен: зависит от выбранных регион/фонд/стены ОО и стен аналога
	React.useEffect(() => {
		const regionKey = resolveWallsRegionKey(selectedRegion)
		const fundKey = resolveWallsFundGroupKey(selectedFund)
		if (!regionKey || !fundKey) return
		setAnalogs((prev) => {
			let changed = false
			const next = prev.map((a) => {
				const analogWall = a.__analogWall
				if (!analogWall) return a
				const m = calcWallsMultiplier(regionKey, fundKey, selectedEvalWall, analogWall)
				if (m === null) return a
				if (a.adjWalls !== m) {
					changed = true
					return { ...a, adjWalls: m }
				}
				return a
			})
			return changed ? next : prev
		})
	}, [selectedRegion, selectedFund, selectedEvalWall, analogs.map(a => a.__analogWall || '').join('|')])

	// Автокорректировка состояния дома: зависит от выбранных регион/фонд/состояния ОО и состояния аналога
	React.useEffect(() => {
		const regionKey = resolveHouseConditionRegionKey(selectedRegion)
		const fundKey = resolveHouseConditionFundGroupKey(selectedFund)
		if (!regionKey || !fundKey) return
		setAnalogs((prev) => {
			let changed = false
			const next = prev.map((a) => {
				const analogCondition = a.__analogHouseCondition
				if (!analogCondition) return a
				const m = calcHouseConditionMultiplier(regionKey, fundKey, selectedEvalHouseCondition, analogCondition)
				if (m === null) return a
				if (a.adjHouseCondition !== m) {
					changed = true
					return { ...a, adjHouseCondition: m }
				}
				return a
			})
			return changed ? next : prev
		})
	}, [selectedRegion, selectedFund, selectedEvalHouseCondition, analogs.map(a => a.__analogHouseCondition || '').join('|')])

	// Автокорректировка состояния отделки квартиры: зависит от выбранного региона/состояния ОО и состояния аналога
	React.useEffect(() => {
		const regionKey = resolveFlatConditionRegionKey(selectedRegion)
		if (!regionKey) return
		setAnalogs((prev) => {
			let changed = false
			const next = prev.map((a) => {
				const analogCondition = a.__analogFlatCondition
				if (!analogCondition) return a
				const m = calcFlatConditionMultiplier(regionKey, selectedEvalFlatCondition, analogCondition)
				if (m === null) return a
				if (a.adjFlatCondition !== m) {
					changed = true
					return { ...a, adjFlatCondition: m }
				}
				return a
			})
			return changed ? next : prev
		})
	}, [selectedRegion, selectedEvalFlatCondition, analogs.map(a => a.__analogFlatCondition || '').join('|')])

	// Автокорректировка на наличие балкона/лоджии
	React.useEffect(() => {
		const regionKey = resolveBalconyRegionKey(selectedRegion)
		if (!regionKey) return
		setAnalogs((prev) => {
			let changed = false
			const next = prev.map((a) => {
				const analogBalcony = a.__analogBalcony
				if (analogBalcony !== 'есть' && analogBalcony !== 'нет') return a
				const m = calcBalconyMultiplier(regionKey, selectedEvalBalcony === 'есть', analogBalcony === 'есть')
				if (m === null) return a
				if (a.adjBalcony !== m) {
					changed = true
					return { ...a, adjBalcony: m }
				}
				return a
			})
			return changed ? next : prev
		})
	}, [selectedRegion, selectedEvalBalcony, analogs.map(a => a.__analogBalcony || '').join('|')])

	// Доступные опции стен для выбранных регион/фонд
	const wallsRegionKey = useMemo(() => resolveWallsRegionKey(selectedRegion), [selectedRegion])
	const wallsFundKey = useMemo(() => resolveWallsFundGroupKey(selectedFund), [selectedFund])
	const evalWallOptions = useMemo(() => (wallsRegionKey && wallsFundKey ? getEvalWallOptions(wallsRegionKey, wallsFundKey) : []), [wallsRegionKey, wallsFundKey])

	// Синхронизируем выбранный тип стен объекта оценки с доступными опциями
	React.useEffect(() => {
		if (!evalWallOptions.length) return
		if (!evalWallOptions.includes(selectedEvalWall)) {
			setSelectedEvalWall(evalWallOptions[0])
		}
	}, [evalWallOptions])

	// Доступные опции состояния дома для выбранных регион/фонд
	const houseConditionRegionKey = useMemo(() => resolveHouseConditionRegionKey(selectedRegion), [selectedRegion])
	const houseConditionFundKey = useMemo(() => resolveHouseConditionFundGroupKey(selectedFund), [selectedFund])
	const evalHouseConditionOptions = useMemo(() => (houseConditionRegionKey && houseConditionFundKey ? getEvalHouseConditionOptions(houseConditionRegionKey, houseConditionFundKey) : []), [houseConditionRegionKey, houseConditionFundKey])

	// Синхронизируем выбранное состояние дома объекта оценки с доступными опциями
	React.useEffect(() => {
		if (!evalHouseConditionOptions.length) return
		if (!evalHouseConditionOptions.includes(selectedEvalHouseCondition)) {
			setSelectedEvalHouseCondition(evalHouseConditionOptions[0])
		}
	}, [evalHouseConditionOptions])

	// Доступные опции состояния отделки квартиры для выбранного региона
	const flatConditionRegionKey = useMemo(() => resolveFlatConditionRegionKey(selectedRegion), [selectedRegion])
	const evalFlatConditionOptions = useMemo(() => (flatConditionRegionKey ? getEvalFlatConditionOptions(flatConditionRegionKey) : []), [flatConditionRegionKey])

	// Синхронизируем выбранное состояние отделки квартиры объекта оценки с доступными опциями
	React.useEffect(() => {
		if (!evalFlatConditionOptions.length) return
		if (!evalFlatConditionOptions.includes(selectedEvalFlatCondition)) {
			setSelectedEvalFlatCondition(evalFlatConditionOptions[0])
		}
	}, [evalFlatConditionOptions])

	const computed = useMemo(() => {
		return analogs.map((a) => {
			const priceOffer = parseNumber(a.priceOfferThousand) // тыс. руб.
			const area = parseNumber(a.areaSqm)
			const pricePerSqm = area > 0 ? priceOffer / area : 0 // тыс. руб./м²

			const steps = []
			let current = pricePerSqm

			// Права
			current = current * parseNumber(a.adjRights || 1)
			steps.push({ key: 'rights', label: 'Права (1)', value: current })
			// Финансовые условия
			current = current * parseNumber(a.adjFinance || 1)
			steps.push({ key: 'finance', label: 'Финансовые условия (1)', value: current })
			// Дата продажи
			current = current * parseNumber(a.adjSaleDate || 1)
			steps.push({ key: 'saleDate', label: 'Дата продажи (1)', value: current })
			// Торг
			current = current * parseNumber(a.adjTrade || 1)
			steps.push({ key: 'trade', label: 'Торг', value: current })
			// Местоположение
			current = current * parseNumber(a.adjLocation || 1)
			steps.push({ key: 'location', label: 'Местоположение', value: current })
			// Площадь квартиры
			current = current * parseNumber(a.adjArea || 1)
			steps.push({ key: 'area', label: 'Площадь квартиры', value: current })
			// Материал стен
			current = current * parseNumber(a.adjWalls || 1)
			steps.push({ key: 'walls', label: 'Материал стен', value: current })
			// Коммуникации
			current = current * parseNumber(a.adjCommunications || 1)
			steps.push({ key: 'communications', label: 'Коммуникации', value: current })
			// Техсостояние дома
			current = current * parseNumber(a.adjHouseCondition || 1)
			steps.push({ key: 'houseCondition', label: 'Техсостояние дома', value: current })
			// Этажность
			current = current * parseNumber(a.adjFloors || 1)
			steps.push({ key: 'floors', label: 'Этажность', value: current })
			// Техсостояние квартиры
			current = current * parseNumber(a.adjFlatCondition || 1)
			steps.push({ key: 'flatCondition', label: 'Техсостояние квартиры', value: current })
			// Балкон/лоджия
			current = current * parseNumber(a.adjBalcony || 1)
			steps.push({ key: 'balcony', label: 'Балкон/лоджия', value: current })

			const finalAdjustedPerSqm = current
			const units = parseNumber(a.units)

			return {
				pricePerSqm,
				steps,
				finalAdjustedPerSqm,
				units,
			}
		})
	}, [analogs])

	const totalUnits = useMemo(() => computed.reduce((sum, c) => sum + c.units, 0), [computed])
	const weights = useMemo(() => computed.map((c) => (totalUnits > 0 ? c.units / totalUnits : 0)), [computed, totalUnits])
	const weightedAvgPerSqm = useMemo(
		() => computed.reduce((sum, c, i) => sum + c.finalAdjustedPerSqm * (weights[i] || 0), 0),
		[computed, weights]
	)
	const finalPriceThousand = weightedAvgPerSqm * evaluatedAreaSqm

	const updateAnalog = useCallback((idx, field, value) => {
		setAnalogs((prev) => {
			const next = [...prev]
			next[idx] = { ...next[idx], [field]: value }
			return next
		})
	}, [])

	const fieldHandlers = useMemo(() => {
		const handlers = {}
		for (let i = 0; i < 3; i++) {
			handlers[i] = {
				priceOfferThousand: (value) => updateAnalog(i, 'priceOfferThousand', value),
				areaSqm: (value) => updateAnalog(i, 'areaSqm', value),
				adjRights: (value) => updateAnalog(i, 'adjRights', value),
				adjFinance: (value) => updateAnalog(i, 'adjFinance', value),
				adjSaleDate: (value) => updateAnalog(i, 'adjSaleDate', value),
				adjTrade: (value) => updateAnalog(i, 'adjTrade', value),
				adjLocation: (value) => updateAnalog(i, 'adjLocation', value),
				adjArea: (value) => updateAnalog(i, 'adjArea', value),
				adjWalls: (value) => updateAnalog(i, 'adjWalls', value),
				adjCommunications: (value) => updateAnalog(i, 'adjCommunications', value),
				adjHouseCondition: (value) => updateAnalog(i, 'adjHouseCondition', value),
				adjFloors: (value) => updateAnalog(i, 'adjFloors', value),
				adjFlatCondition: (value) => updateAnalog(i, 'adjFlatCondition', value),
				adjBalcony: (value) => updateAnalog(i, 'adjBalcony', value),
				units: (value) => updateAnalog(i, 'units', value),
			}
		}
		return handlers
	}, [updateAnalog])

	// Автокорректировка на площадь для каждого аналога
	React.useEffect(() => {
		setAnalogs((prev) => {
			let changed = false
			const next = prev.map((a) => {
				const m = calcAreaMultiplier(evaluatedAreaSqm, parseNumber(a.areaSqm))
				if (m === null) return a
				// обновляем только если отличается, чтобы не зациклиться
				if (a.adjArea !== m) {
					changed = true
					return { ...a, adjArea: m }
				}
				return a
			})
			return changed ? next : prev
		})
	}, [evaluatedAreaSqm, analogs.map(a => a.areaSqm).join(',')])

	return (
		<div style={{...styles.container, ...(isMobile ? styles.mobileContainer : {})}}>
			<h1 style={{...styles.header, ...(isMobile ? styles.mobileHeader : {})}}>
				Таблица оценки (сравнительный подход)
			</h1>
			
			{/* Блок настроек для автоматического расчета скидки на торг */}
			<div style={{ ...styles.tableContainer, padding: '16px' }}>
				<div style={{ display: 'grid', gridTemplateColumns: isMobile ? '1fr' : '1fr 1fr 1fr', gap: '12px' }}>
					<div>
						<label style={{ display: 'block', marginBottom: 6, color: '#475569', fontWeight: 600 }}>Регион</label>
						<select
							value={selectedRegion}
							onChange={(e) => setSelectedRegion(e.target.value)}
							style={styles.select}
						>
							{Object.keys(TRADE_DISCOUNTS).map((region) => (
								<option key={region} value={region}>{region}</option>
							))}
						</select>
					</div>
					<div>
						<label style={{ display: 'block', marginBottom: 6, color: '#475569', fontWeight: 600 }}>Фонд</label>
						<select
							value={selectedFund}
							onChange={(e) => setSelectedFund(e.target.value)}
							style={styles.select}
						>
							{Object.keys(TRADE_DISCOUNTS[selectedRegion] || {}).map((fund) => (
								<option key={fund} value={fund}>{fund}</option>
							))}
						</select>
					</div>
					<div>
						{tradeMultiplier === null && (
							<div style={{ marginTop: 8, color: '#64748b', fontSize: 12 }}>
								Для выбранной комбинации нет среднего значения. Поле «Корректировка на торг» не изменяется.
							</div>
						)}
					</div>
				</div>
				<div style={{ marginTop: 12, display: 'grid', gridTemplateColumns: isMobile ? '1fr' : '1fr 1fr', gap: '12px' }}>
					<div>
						<label style={{ display: 'block', marginBottom: 6, color: '#475569', fontWeight: 600 }}>Класс местоположения</label>
						<select
							value={selectedLocationClass}
							onChange={(e) => setSelectedLocationClass(e.target.value)}
							style={styles.select}
						>
							{(() => {
								const regionKey = resolveLocationRegionKey(selectedRegion)
								const fundKey = resolveLocationFundGroupKey(selectedFund)
								const group = regionKey ? LOCATION_COEFFICIENTS[regionKey]?.[fundKey] : null
								return group ? Object.keys(group).map((loc) => (
									<option key={loc} value={loc}>{loc}</option>
								)) : [<option key="_no" value={selectedLocationClass}>Нет данных</option>]
							})()}
						</select>
					</div>
					<div>
						{locationMultiplier === null && (
							<div style={{ marginTop: 8, color: '#64748b', fontSize: 12 }}>
								Для выбранной комбинации нет коэффициента. Поле «Корректировка на местоположение» не изменяется.
							</div>
						)}
					</div>
				</div>
				<div style={{ marginTop: 12 }}>
					<label style={{ display: 'block', marginBottom: 6, color: '#475569', fontWeight: 600 }}>Материал стен объекта оценки</label>
					<select
						value={selectedEvalWall}
						onChange={(e) => setSelectedEvalWall(e.target.value)}
						style={styles.select}
					>
						{evalWallOptions.length ? (
							evalWallOptions.map((opt) => <option key={opt} value={opt}>{opt}</option>)
						) : (
							<option value={selectedEvalWall}>Нет данных</option>
						)}
					</select>
				</div>
				<div style={{ marginTop: 12 }}>
					<label style={{ display: 'block', marginBottom: 6, color: '#475569', fontWeight: 600 }}>Техсостояние дома объекта оценки</label>
					<select
						value={selectedEvalHouseCondition}
						onChange={(e) => setSelectedEvalHouseCondition(e.target.value)}
						style={styles.select}
					>
						{evalHouseConditionOptions.length ? (
							evalHouseConditionOptions.map((opt) => <option key={opt} value={opt}>{opt}</option>)
						) : (
							<option value={selectedEvalHouseCondition}>Нет данных</option>
						)}
					</select>
				</div>
				<div style={{ marginTop: 12 }}>
					<label style={{ display: 'block', marginBottom: 6, color: '#475569', fontWeight: 600 }}>Состояние отделки квартиры объекта оценки</label>
					<select
						value={selectedEvalFlatCondition}
						onChange={(e) => setSelectedEvalFlatCondition(e.target.value)}
						style={styles.select}
					>
						{evalFlatConditionOptions.length ? (
							evalFlatConditionOptions.map((opt) => <option key={opt} value={opt}>{opt}</option>)
						) : (
							<option value={selectedEvalFlatCondition}>Нет данных</option>
						)}
					</select>
				</div>
				<div style={{ marginTop: 12 }}>
					<label style={{ display: 'block', marginBottom: 6, color: '#475569', fontWeight: 600 }}>Наличие балкона/лоджии у объекта оценки</label>
					<select
						value={selectedEvalBalcony}
						onChange={(e) => setSelectedEvalBalcony(e.target.value)}
						style={styles.select}
					>
						<option value="есть">есть</option>
						<option value="нет">нет</option>
					</select>
				</div>
			</div>
			
			<div style={styles.tableContainer}>
				<div style={{ overflowX: 'auto' }}>
					<table style={{...styles.table, ...(isMobile ? styles.mobileTable : {})}}>
						<thead style={styles.thead}>
							<tr>
								<th style={{...styles.th, ...styles.tdLabel, ...(isMobile ? styles.mobileTh : {})}}>
									Показатель
								</th>
								{[0, 1, 2].map((i) => (
									<th key={i} style={{...styles.th, ...styles.analogHeader, ...(isMobile ? styles.mobileTh : {})}}>
										Аналог {i + 1}
									</th>
								))}
							</tr>
						</thead>
						<tbody>
							<tr>
								<td style={{...styles.td, ...styles.tdLabel, ...(isMobile ? styles.mobileTd : {})}}>
									Цена предложения (тыс. руб.)
								</td>
								{analogs.map((a, i) => (
									<td key={i} style={{...styles.td, ...(isMobile ? styles.mobileTd : {})}}>
										<Input 
											value={a.priceOfferThousand} 
											step="0.01" 
											placeholder="0.00"
											onChange={fieldHandlers[i].priceOfferThousand}
											isMobile={isMobile}
										/>
									</td>
								))}
							</tr>
							<tr>
								<td style={{...styles.td, ...styles.tdLabel, ...(isMobile ? styles.mobileTd : {})}}>
									Площадь (м²)
								</td>
								{analogs.map((a, i) => (
									<td key={i} style={{...styles.td, ...(isMobile ? styles.mobileTd : {})}}>
										<Input 
											value={a.areaSqm} 
											step="0.01" 
											min="0" 
											placeholder="0.00"
											onChange={fieldHandlers[i].areaSqm}
											isMobile={isMobile}
										/>
									</td>
								))}
							</tr>
						<tr>
							<td style={{...styles.td, ...styles.tdLabel, ...(isMobile ? styles.mobileTd : {})}}>
								Материал стен аналога
							</td>
							{analogs.map((a, i) => (
								<td key={i} style={{...styles.td, ...(isMobile ? styles.mobileTd : {})}}>
									<select
										value={a.__analogWall || ''}
										onChange={(e) => {
											const val = e.target.value
											setAnalogs((prev) => {
												const next = [...prev]
												next[i] = { ...next[i], __analogWall: val }
												return next
											})
										}}
										style={styles.select}
									>
										{(() => {
											const regionKey = resolveWallsRegionKey(selectedRegion)
											const fundKey = resolveWallsFundGroupKey(selectedFund)
											const options = regionKey && fundKey ? getAnalogWallOptions(regionKey, fundKey, selectedEvalWall) : []
											return options.length ? options.map((opt) => (
												<option key={opt} value={opt}>{opt}</option>
											)) : [<option key="_no" value="">Нет данных</option>]
										})()}
									</select>
								</td>
							))}
						</tr>
						<tr>
							<td style={{...styles.td, ...styles.tdLabel, ...(isMobile ? styles.mobileTd : {})}}>
								Техсостояние дома аналога
							</td>
							{analogs.map((a, i) => (
								<td key={i} style={{...styles.td, ...(isMobile ? styles.mobileTd : {})}}>
									<select
										value={a.__analogHouseCondition || ''}
										onChange={(e) => {
											const val = e.target.value
											setAnalogs((prev) => {
												const next = [...prev]
												next[i] = { ...next[i], __analogHouseCondition: val }
												return next
											})
										}}
										style={styles.select}
									>
										{(() => {
											const regionKey = resolveHouseConditionRegionKey(selectedRegion)
											const fundKey = resolveHouseConditionFundGroupKey(selectedFund)
											const options = regionKey && fundKey ? getAnalogHouseConditionOptions(regionKey, fundKey, selectedEvalHouseCondition) : []
											return options.length ? options.map((opt) => (
												<option key={opt} value={opt}>{opt}</option>
											)) : [<option key="_no" value="">Нет данных</option>]
										})()}
									</select>
								</td>
							))}
						</tr>
						<tr>
							<td style={{...styles.td, ...styles.tdLabel, ...(isMobile ? styles.mobileTd : {})}}>
								Состояние отделки квартиры аналога
							</td>
							{analogs.map((a, i) => (
								<td key={i} style={{...styles.td, ...(isMobile ? styles.mobileTd : {})}}>
									<select
										value={a.__analogFlatCondition || ''}
										onChange={(e) => {
											const val = e.target.value
											setAnalogs((prev) => {
												const next = [...prev]
												next[i] = { ...next[i], __analogFlatCondition: val }
												return next
											})
										}}
										style={styles.select}
									>
										{(() => {
											const regionKey = resolveFlatConditionRegionKey(selectedRegion)
											const options = regionKey ? getAnalogFlatConditionOptions(regionKey, selectedEvalFlatCondition) : []
											return options.length ? options.map((opt) => (
												<option key={opt} value={opt}>{opt}</option>
											)) : [<option key="_no" value="">Нет данных</option>]
										})()}
									</select>
								</td>
							))}
						</tr>
					<tr>
						<td style={{...styles.td, ...styles.tdLabel, ...(isMobile ? styles.mobileTd : {})}}>
							Наличие балкона/лоджии у аналога
						</td>
						{analogs.map((a, i) => (
							<td key={i} style={{...styles.td, ...(isMobile ? styles.mobileTd : {})}}>
								<select
									value={a.__analogBalcony || ''}
									onChange={(e) => {
										const val = e.target.value
										setAnalogs((prev) => {
											const next = [...prev]
											next[i] = { ...next[i], __analogBalcony: val }
											return next
										})
									}}
									style={styles.select}
								>
									<option value="есть">есть</option>
									<option value="нет">нет</option>
								</select>
							</td>
						))}
					</tr>
							<tr style={styles.highlightRow}>
								<td style={{...styles.td, ...styles.tdLabel, ...(isMobile ? styles.mobileTd : {})}}>
									Стоимость за м² (тыс. руб.)
								</td>
								{computed.map((c, i) => (
									<td key={i} style={{...styles.td, ...(isMobile ? styles.mobileTd : {})}}>
										<span style={{...styles.valueDisplay, ...(isMobile ? styles.mobileValueDisplay : {})}}>
											{formatNumber(c.pricePerSqm)}
										</span>
									</td>
								))}
							</tr>

							<tr>
								<td colSpan={4} style={styles.sectionDivider}></td>
							</tr>

						{[
								{ field: 'adjRights', label: 'Права (всегда 1)', readonly: true },
								{ field: 'adjFinance', label: 'Финансовые условия (всегда 1)', readonly: true },
								{ field: 'adjSaleDate', label: 'Дата продажи (всегда 1)', readonly: true },
							{ field: 'adjTrade', label: 'Корректировка на торг' },
							{ field: 'adjLocation', label: 'Корректировка на местоположение' },
							{ field: 'adjArea', label: 'Корректировка на площадь квартиры' },
							{ field: 'adjWalls', label: 'Корректировка на материал стен' },
								{ field: 'adjCommunications', label: 'Корректировка на коммуникации' },
								{ field: 'adjHouseCondition', label: 'Корректировка на техсостояние дома' },
								{ field: 'adjFloors', label: 'Корректировка на этажность' },
								{ field: 'adjBalcony', label: 'Корректировка на балкон/лоджию' },
							].map((row, rowIdx) => (
								<tr key={row.field}>
									<td style={{...styles.td, ...styles.tdLabel, ...(isMobile ? styles.mobileTd : {})}}>
										{row.label}
									</td>
									{analogs.map((a, i) => (
						<td key={i} style={{...styles.td, ...(isMobile ? styles.mobileTd : {})}}>
							<div style={styles.inputGroup}>
								<Input 
									value={a[row.field]} 
									step="0.0001" 
									placeholder="1.0000"
									onChange={fieldHandlers[i][row.field]}
									isMobile={isMobile}
								/>
								<span style={{...styles.valueDisplay, ...(isMobile ? styles.mobileValueDisplay : {})}}>
									{formatNumber(computed[i].steps[rowIdx]?.value)}
								</span>
							</div>
						</td>
									))}
								</tr>
							))}

							<tr>
								<td style={{...styles.td, ...styles.tdLabel, ...(isMobile ? styles.mobileTd : {})}}>
									Корректировка на техническое состояние квартиры
								</td>
								{analogs.map((a, i) => (
									<td key={i} style={{...styles.td, ...(isMobile ? styles.mobileTd : {})}}>
										<div style={styles.inputGroup}>
											<span style={{...styles.valueDisplay, ...(isMobile ? styles.mobileValueDisplay : {})}}>
												{(() => {
													const regionKey = resolveFlatConditionRegionKey(selectedRegion)
													const m = regionKey ? calcFlatConditionMultiplier(regionKey, selectedEvalFlatCondition, a.__analogFlatCondition) : null
													return m !== null ? formatNumber(m) : 'Нет данных'
												})()}
											</span>
											<Input 
												value={a.adjFlatCondition} 
												step="0.0001" 
												placeholder="1.0000"
												onChange={fieldHandlers[i].adjFlatCondition}
												isMobile={isMobile}
											/>
											<span style={{...styles.valueDisplay, ...(isMobile ? styles.mobileValueDisplay : {})}}>
												{formatNumber(computed[i].steps.find(s => s.key === 'flatCondition')?.value)}
											</span>
										</div>
									</td>
								))}
							</tr>

							<tr>
								<td colSpan={4} style={styles.sectionDivider}></td>
							</tr>

							<tr style={styles.resultRow}>
								<td style={{...styles.td, ...styles.tdLabel, ...(isMobile ? styles.mobileTd : {})}}>
									Итоговая скорректированная стоимость за м² (тыс. руб.)
								</td>
								{computed.map((c, i) => (
									<td key={i} style={{...styles.td, ...(isMobile ? styles.mobileTd : {})}}>
										<span style={{...styles.valueDisplay, ...(isMobile ? styles.mobileValueDisplay : {})}}>
											{formatNumber(c.finalAdjustedPerSqm)}
										</span>
									</td>
								))}
							</tr>

							<tr>
								<td style={{...styles.td, ...styles.tdLabel, ...(isMobile ? styles.mobileTd : {})}}>
									Количество единиц
								</td>
								{analogs.map((a, i) => (
									<td key={i} style={{...styles.td, ...(isMobile ? styles.mobileTd : {})}}>
										<Input 
											value={a.units} 
											step="1" 
											placeholder="0"
											onChange={fieldHandlers[i].units}
											isMobile={isMobile}
										/>
									</td>
								))}
							</tr>
							<tr style={styles.resultRow}>
								<td style={{...styles.td, ...styles.tdLabel, ...(isMobile ? styles.mobileTd : {})}}>
									Общее количество единиц
								</td>
								<td colSpan={3} style={{...styles.td, ...(isMobile ? styles.mobileTd : {})}}>
									<span style={{...styles.valueDisplay, ...(isMobile ? styles.mobileValueDisplay : {})}}>
										{formatNumber(totalUnits, 0)}
									</span>
								</td>
							</tr>
							<tr>
								<td style={{...styles.td, ...styles.tdLabel, ...(isMobile ? styles.mobileTd : {})}}>
									Вес аналога
								</td>
								{weights.map((w, i) => (
									<td key={i} style={{...styles.td, ...(isMobile ? styles.mobileTd : {})}}>
										<span style={{...styles.valueDisplay, ...(isMobile ? styles.mobileValueDisplay : {})}}>
											{formatNumber(w, 4)}
										</span>
									</td>
								))}
							</tr>
							<tr>
								<td style={{...styles.td, ...styles.tdLabel, ...(isMobile ? styles.mobileTd : {})}}>
									Скорректированная цена × вес (тыс. руб./м²)
								</td>
								{computed.map((c, i) => (
									<td key={i} style={{...styles.td, ...(isMobile ? styles.mobileTd : {})}}>
										<span style={{...styles.valueDisplay, ...(isMobile ? styles.mobileValueDisplay : {})}}>
											{formatNumber(c.finalAdjustedPerSqm * (weights[i] || 0))}
										</span>
									</td>
								))}
							</tr>
							<tr style={styles.resultRow}>
								<td style={{...styles.td, ...styles.tdLabel, ...(isMobile ? styles.mobileTd : {})}}>
									Средневзвешенная скорректированная стоимость за м² (тыс. руб.)
								</td>
								<td colSpan={3} style={{...styles.td, ...(isMobile ? styles.mobileTd : {})}}>
									<span style={{...styles.valueDisplay, ...(isMobile ? styles.mobileValueDisplay : {})}}>
										{formatNumber(weightedAvgPerSqm)}
									</span>
								</td>
							</tr>

							{/* Разделитель */}
							<tr>
								<td colSpan={4} style={styles.sectionDivider}></td>
							</tr>

							{/* Финальные результаты */}
							<tr>
								<td style={{...styles.td, ...styles.tdLabel, ...(isMobile ? styles.mobileTd : {})}}>
									Площадь оцениваемой квартиры (м²)
								</td>
								<td colSpan={3} style={{...styles.td, ...(isMobile ? styles.mobileTd : {})}}>
									<span style={{...styles.valueDisplay, ...(isMobile ? styles.mobileValueDisplay : {})}}>
										{evaluatedAreaSqm}
									</span>
								</td>
							</tr>
							<tr style={styles.finalRow}>
								<td style={{...styles.td, ...styles.tdLabel, ...(isMobile ? styles.mobileTd : {})}}>
									Итоговая стоимость квартиры (тыс. руб.)
								</td>
								<td colSpan={3} style={{...styles.td, ...(isMobile ? styles.mobileTd : {})}}>
									<span style={{
										...styles.valueDisplay, 
										fontSize: isMobile ? '16px' : '18px', 
										backgroundColor: '#dcfce7', 
										color: '#166534',
										...(isMobile ? styles.mobileValueDisplay : {})
									}}>
										{formatNumber(finalPriceThousand)}
									</span>
								</td>
							</tr>
						</tbody>
					</table>
				</div>
			</div>
			
			<div style={styles.note}>
				<strong>Примечание:</strong> Все цены указаны в тысячах рублей. Корректировки применяются последовательно к стоимости за м².
			</div>
		</div>
	)
}